<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFrameworks>net46</TargetFrameworks>
    <RuntimeIdentifier>win7-x64</RuntimeIdentifier>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <EnableDefaultItems>false</EnableDefaultItems>
    <PlatformTarget>AnyCPU</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System.Net.Http" />
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="NativeConsole.cs" />
    <Compile Include="NativeCredential.cs" />
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config" />
  </ItemGroup>
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <Target Name="AfterResolveReferences" Condition="'$(Configuration)'=='Release'">
    <Exec Command="git.exe log -1 --format=%%h ." ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommit" />
    </Exec>
    <PropertyGroup>
      <InfoVersionFile>$(IntermediateOutputPath)AssemblyInfoVersion.cs</InfoVersionFile>
      <InfoVersionNew>[assembly:System.Reflection.AssemblyInformationalVersion(&quot;$(GitCommit)&quot;)]</InfoVersionNew>
    </PropertyGroup>
    <!-- rewrite version file if version changed -->
    <ReadLinesFromFile File="$(InfoVersionFile)">
      <Output TaskParameter="Lines" PropertyName="InfoVersionOld"/>
    </ReadLinesFromFile>
    <WriteLinesToFile File="$(InfoVersionFile)" Overwrite="true" Lines="$(InfoVersionNew)" Condition="'$(InfoVersionOld)'!='$(InfoVersionNew)'" />
    <!-- create the item dynamically to prevent spurious rebuilds -->
    <ItemGroup>
      <Compile Include="$(InfoVersionFile)" />
    </ItemGroup>
    <ItemGroup>
      <EmbeddedResource Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Extension)' == '.dll'">
        <LogicalName>$([System.String]::new('%(ReferenceCopyLocalPaths.DestinationSubDirectory)%(ReferenceCopyLocalPaths.Filename)%(ReferenceCopyLocalPaths.Extension)').ToLowerInvariant ())</LogicalName>
      </EmbeddedResource>
    </ItemGroup>
  </Target>
</Project>